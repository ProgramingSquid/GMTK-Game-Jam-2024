//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Movment"",
            ""id"": ""21804df8-c527-4716-b68b-235dccab9b58"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""495547c0-55be-496a-a7ee-8013e8abe163"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fly"",
                    ""type"": ""Button"",
                    ""id"": ""cfa0da48-e50a-4254-b639-be9f90b9bc49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""977a1dce-b400-40f9-bbf4-b4dc0a1b067a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""165c4fa1-329a-4490-90fe-389045ff0a37"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43bd3942-368c-4262-a41c-28dbddb523f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2783785f-0ea2-4644-bc8b-34c04bb73a25"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movment
        m_Movment = asset.FindActionMap("Movment", throwIfNotFound: true);
        m_Movment_Aim = m_Movment.FindAction("Aim", throwIfNotFound: true);
        m_Movment_Fly = m_Movment.FindAction("Fly", throwIfNotFound: true);
        m_Movment_Dash = m_Movment.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movment
    private readonly InputActionMap m_Movment;
    private IMovmentActions m_MovmentActionsCallbackInterface;
    private readonly InputAction m_Movment_Aim;
    private readonly InputAction m_Movment_Fly;
    private readonly InputAction m_Movment_Dash;
    public struct MovmentActions
    {
        private @Input m_Wrapper;
        public MovmentActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_Movment_Aim;
        public InputAction @Fly => m_Wrapper.m_Movment_Fly;
        public InputAction @Dash => m_Wrapper.m_Movment_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Movment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovmentActions set) { return set.Get(); }
        public void SetCallbacks(IMovmentActions instance)
        {
            if (m_Wrapper.m_MovmentActionsCallbackInterface != null)
            {
                @Aim.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnAim;
                @Fly.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnFly;
                @Fly.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnFly;
                @Fly.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnFly;
                @Dash.started -= m_Wrapper.m_MovmentActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MovmentActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MovmentActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_MovmentActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Fly.started += instance.OnFly;
                @Fly.performed += instance.OnFly;
                @Fly.canceled += instance.OnFly;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public MovmentActions @Movment => new MovmentActions(this);
    public interface IMovmentActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnFly(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
